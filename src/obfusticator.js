

export default function obfusticator(phrase) {
  //burrito will be the phrase inserted
  let splitter = Array.from(phrase);
  let oPhrase = [];
  let a = ["Ā", "ā", "Ă", "ă", "Ą", "ą", "à", "á", "â", "ã", "ä", "å", "À", "Á", "Â", "Ã", "Ä", "Å", "ƛ", "Ǎ", "ǎ", "Ǟ", "ǟ", "Ǡ", "Ǻ", "ǻ", "Ȁ", "ȁ", "Ȃ", "ȃ", "ȧ", "Ȧ", "Ⱥ", "Ʌ", "ɑ", "˄", "Ά", "Α", "Δ", "Λ", "α", "ά", "Ά", "λ", "д", "Ѧ", "ѧ", "Ӑ", "ӑ", "Ӓ", "ӓ", "ճ", "Д", "ᴧ", "ᶺ", "Ḁ", "ḁ", "Ạ", "ạ", "Ả", "ả", "Ấ", "ấ", "Ầ", "ầ", "Ẩ", "ẩ", "Ẫ", "ẫ", "Ậ", "ậ", "Ắ", "ắ", "Ằ", "ằ", "Ẳ", "ẳ", "Ẵ", "ẵ", "Ặ", "ặ", "ἀ", "ἁ", "ἂ", "ἃ", "ἄ", "ἅ", "ἆ", "ἇ", "Ἀ", "Ἁ", "Ἂ", "Ἃ", "Ἄ", "Ἅ", "Ἆ", "Ἇ", "ᾀ", "ᾁ", "ᾂ", "ᾃ", "ᾄ", "ᾅ", "ᾆ", "ᾇ", "ᾈ", "ᾉ", "ᾊ", "ᾋ", "ᾌ", "ᾍ", "ᾎ", "ᾏ", "ᾰ", "ᾱ", "ᾲ", "ᾳ", "ᾴ", "ᾶ", "ᾷ", "Ᾰ", "Ᾱ", "Ὰ", "Ά", "ᾼ", "₳", "ⱥ", "ꜻ", "ꜽ", "Ɐ", "ꬰ"];
  let b = ["ß", "Þ", "6", "ƀ", "Ɓ", "Ƃ", "ƃ", "Ƅ", "ƅ", "Ȣ", "ȣ", "Ƀ", "ɓ", "ɮ", "ʙ", "β", "ϐ", "Б", "Ϸ", "Ъ", "Ь", "б", "ь", "Ѣ", "ѣ", "Ҍ", "ҍ", "Ҕ", "ҕ", "ط", "ظ", "ᴃ", "ᴯ", "ᵆ", "ᵇ", "ᵬ", "ᵦ", "ᶀ", "ḃ", "Ḅ", "ḅ", "Ḇ", "ḇ", "ẞ", "₿", "Ꞛ", "ꞛ", "Ꞗ", "ꞗ", "Ꞵ", "ꞵ"];
  let c = ["©", "Ć", "ć", "Ĉ", "ĉ", "Ç", "Ċ", "ċ", "Č", "č", "Ɔ", "Ƈ", "ɔ", "ʗ", "ͨ", "ͻ", "ς", "Ϛ", "ϲ", "Ͻ", "Ͽ", "Ͼ", "Ϲ", "С", "с", "Ҫ", "ҫ", "ح", "ᴐ", "ᵙ", "ᶜ", "Ḉ", "ḉ", "₡", "₵", "₢", "ꜿ", "Ꜿ", "◄", "Ꞇ", "ꞇ", "ﬤ"];
  let d = ["Ð", "Ď", "ď", "Đ", "đ", "Ɖ", "Ɗ", "Ƌ", "ƌ", "Ƿ", "ȡ", "ɗ", "ɖ", "ʠ", "ͩ", "δ", "Ԁ", "ԁ", "Ԃ", "ԃ", "Ժ", "ձ", "ծ", "ם", "ᴆ", "ᴅ", "ᴰ", "ᵭ", "ᶁ", "ᶑ", "ᶛ", "Ḋ", "ḋ", "Ḍ", "ḍ", "Ḏ", "ḏ", "ḑ", "Ḓ", "ḓ", "₫", "∂", "Ɒ", "ꝱ", "ꝺ"];
  let e = ["È", "É", "Ê", "Ë", "è", "é", "ê", "ë", "Ē", "ē", "Ĕ", "ĕ", "Ė", "ė", "Ę", "ę", "Ě", "ě", "Ǝ", "Ɛ", "Ʃ", "Ȅ", "ȅ", "Ȇ", "ȇ", "Ȩ", "ȩ", "ͤ", "Έ", "ξ", "Ѐ", "Ё", "Е", "Ξ", "Έ", "ϵ", "ѐ", "ё", "Ӗ", "ӗ", "Ҿ", "ҽ", "Ҽ", "ᴱ", "ᵉ", "ᵋ", "ᶒ", "ᶓ", "Ḕ", "ḕ", "Ḗ", "Ḙ", "ḗ", "ḙ", "Ḛ", "ḛ", "Ḝ", "ḝ", "Ẹ", "ẹ", "Ẻ", "ẻ", "Ẽ", "ẽ", "Ế", "ế", "Ề", "ề", "Ể", "ể", "Ễ", "ễ", "Ệ", "ệ", "ἐ", "ἑ", "ἒ", "ἓ", "ἔ", "ἕ", "Ἐ", "Ἑ", "Ἒ", "Ἓ", "Ἔ", "Ἕ", "ὲ", "έ", "Ὲ", "Έ", "€", "∑", "ⱻ", "Ꞓ", "ꞓ", "ꬴ", "ꬳ"];
  let f = ["Ƒ", "ƒ", "ɍ", "ɟ", "Ϝ", "ϝ", "Ғ", "ғ", "Ӻ", "ӻ", "Բ", "բ", "ᵲ", "ᵮ", "ᶂ", "ᶠ", "Ḟ", "ḟ", "₣", "ⅎ", "ꝭ", "Ꝭ", "Ꞙ", "ꟻ", "ꞙ", "Ꞙ"];
  let g = ["Ĝ", "ĝ", "Ğ", "ğ", "Ġ", "ġ", "Ģ", "ģ", "Ɠ", "ǥ", "Ǥ", "Ǧ", "ǧ", "Ǵ", "ǵ", "ɕ", "ɢ", "ɡ", "ʛ", "ϭ", "Ϭ", "Ԍ", "ԍ", "ٸ", "ᶃ", "Ḡ", "ḡ", "₲", "ꝯ", "Ꝯ", "Ɡ", "Ꞡ", "ꞡ"];
  let h = ["Ĥ", "ĥ", "Ħ", "ħ", "ƕ", "Ƕ", "Ȟ", "ȟ", "ɦ", "ɧ", "ʜ", "ʱ", "ʰ", "Ή", "Η", "Ђ", "Н", "н", "ђ", "ћ", "Ң", "ң", "Ҥ", "ҥ", "Ӈ", "ӈ", "Ӊ", "ӊ", "ԣ", "Ԧ", "ԧ", "Ԩ", "ԩ", "ի", "հ", "ᵸ", "Ḣ", "ḣ", "Ḥ", "ḥ", "Ḧ", "ḧ", "Ḩ", "ḩ", "Ḫ", "ḫ", "ẖ", "Ἦ", "Ἥ", "Ἤ", "Ἣ", "Ἢ", "Ἡ", "Ἠ", "ᾘ", "ᾙ", "ᾚ", "ᾛ", "ᾜ", "ᾝ", "ᾞ", "ᾟ", "Ή", "ῌ", "₶", "╠╡", "├┤", "Ⱨ", "Ꜧ", "ꜧ", "Ꝝ", "Ɦ", "ꟸ"];
  let i = ["|", "Ì", "Í", "Î", "Ï", "ì", "í", "î", "ï", "ĩ", "Ī", "ī", "Ĭ", "ĭ", "į", "Į", "İ", "ı", "Ɩ", "ƪ", "ǀ", "Ǐ", "ǐ", "Ȉ", "ȉ", "Ȋ", "ȋ", "ɨ", "ɪ", "ɬ", "ͥ", "Ί", "ΐ", "Ι", "ί", "Ϊ", "ϊ", "І", "Ї", "і", "ї", "Ӏ", "ᴵ", "ᴉ", "ᵢ", "ᶖ", "Ḭ", "ḭ", "Ḯ", "ḯ", "Ỉ", "ỉ", "Ị", "ị", "ἰ", "ἱ", "ἲ", "ἳ", "ἴ", "ἵ", "ἶ", "ἷ", "Ἰ", "Ἱ", "ὶ", "ί", "ῒ", "ΐ", "ῖ", "ῗ", "Ῑ", "Ῐ", "Ὶ", "Ί", "ꜟ", "ﭐ"];
  let j = ["ȷ", "Ɉ", "ɉ", "ɺ", "ɹ", "ʝ", "Ϳ", "Ԏ", "Վ", "յ", "ز", "ᴊ", "ݬ", "ᴶ", "ᶨ", "ڷ", "ڶ", "ڵ", "ژ", "ڙ", "∫"];
  let k = ["Ķ", "ķ", "ĸ", "Ƙ", "ƙ", "Ǩ", "ǩ", "ʞ", "κ", "Ϗ", "Ҡ", "ҟ", "Ҟ", "ҡ", "ҝ", "Ҝ", "қ", "Қ", "Ӄ", "ӄ", "Ԟ", "ԟ", "ᴋ", "ᴷ", "ᶄ", "Ḱ", "ḱ", "Ḳ", "ḳ", "Ḵ", "ḵ", "₭", "Ⱪ", "ⱪ", "Ꞣ", "ꞣ"];
  let l = ["Ĺ", "Ļ", "Ľ", "Ŀ", "Ł", "Ɩ", "Ƚ", "ɩ", "ɭ", "˪", "Ը", "Լ", "׆", "ا", "ᴌ", "ᴸ", "Ḷ", "ḷ", "Ḹ", "Ḻ", "Ḽ", "└", "╘", "Ⱡ", "Ꝉ"];
  let m = ["Ɯ", "ɅɅ", "ɱ", "ͫ", "Μ", "ΔΔ", "π", "Ϻ", "ϻ", "М", "м", "Ѫ", "ӎ", "Ӎ", "ᴍ", "ᶆ", "Ḿ", "ḿ", "Ṁ", "ṁ", "Ṃ", "ṃ", "₼", "Ɱ", "ꝳ", "ꭑ"];
  let n = ["ñ", "Ñ", "Ń", "ń", "Ņ", "ņ", "Ň", "ň", "ŉ", "Ŋ", "ŋ", "Ɲ", "ƞ", "Ǹ", "ǹ", "Ƞ", "ȵ", "Ʌ", "ɲ", "ɳ", "ɴ", "ʌ", "ʎ", "˄", "Ν", "ͷ", "Ͷ", "Π", "η", "λ", "ϰ", "И", "Й", "П", "п", "ѝ", "Ҋ", "Ԯ", "ԯ", "Ԥ", "ԥ", "Ո", "Պ", "Թ", "ղ", "դ", "ռ", "ո", "א", "٨", "ᵑ", "ᵰ", "ᶮ", "ᶰ", "ᶯ", "Ṅ", "ṅ", "Ṇ", "ṇ", "Ṉ", "ṉ", "Ṋ", "ṋ", "ἧ", "ἦ", "ἥ", "ἤ", "ἣ", "ἢ", "ἡ", "ἠ", "ᾐ", "ᾑ", "ᾒ", "ᾓ", "ᾓ", "ᾔ", "ᾕ", "ᾖ", "ᾗ", "ῂ", "ῃ", "ῄ", "ῆ", "ῇ", "∏", "∩", "ꝴ", "ꞃ", "Ꞃ", "Ꞑ", "ꞑ", "Ꞥ", "ꬻ", "ﬡ", "ﬨ", "ﭏ"];
  let o = ["0","ò","ó","ô","õ","Ö","Õ","Ô","Ó","Ò","Ø","ö","ø","Ō","ō","Ŏ","ŏ","Ő","ő","Ɵ","Ơ","Ǒ","ǒ","Ȍ","ȍ","Ȏ","ȏ","Ȫ","ȫ","Ȭ","ȭ","Ȯ","ȯ","Ȱ","ȱ","ʘ","˳","̊","ͦ","Ό","Θ","Ο","ό","ο","σ","ϴ","о","Ѻ","ѻ","Ѳ","ѳ","Ӧ","Օ","օ","֍","֎","۝","ᴑ","ᴏ","ṑ","Ṓ","ṓ","ṏ","Ṏ","ṍ","Ṍ","Ọ","ọ","Ỏ","ỏ","Ố","ố","Ồ","ồ","Ổ","ổ","Ỗ","ỗ","Ộ","ộ","Ớ","ớ","Ờ","ờ","Ở","ở","Ỡ","ỡ","Ợ","ợ","ὀ","ὁ","ὂ","ὃ","ὄ","ὅ","Ὀ","Ὁ","Ὂ","Ὃ","Ὄ","Ὅ","ὸ","ό","Ὸ","Ό","ₒ","⁰","□","▫","○","◊","◌","◙","◦","☺","☼","ⱺ","ꝍ","Ꝍ","Ꝋ","ꝋ","Ꝺ","ꝺ","ꬽ","ﬦ"];
  let p = ["Ƥ", "ƥ", "Ƿ", "Ρ", "ρ", "ϼ", "Р", "р", "Ҏ", "Ք", "ք", "ᴘ", "ᴩ", "ᵱ", "ᵽ", "ᶈ", "Ṕ", "ṕ", "Ṗ", "ṗ", "ῤ", "ῥ", "₱", "₽", "Ᵽ", "Ꝓ", "ꝓ", "Ꝕ", "ꝕ", "קּ"];
  let q = ["ƍ", "ǫ", "Ǭ", "ǭ", "Ǫ", "ɋ", "Ɋ", "ϱ", "Ҩ", "ҩ", "Ԛ", "ԛ", "Գ", "ᶗ", "Ꝙ", "ꝙ", "Ꝿ", "ꝿ"];
  let r = ["®", "Ŕ", "ŕ", "Ŗ", "ŗ", "Ř", "ř", "Ʀ", "Ȓ", "ȑ", "Ȑ", "ȓ", "Ɍ", "ɮ", "ʀ", "ʁ", "ɼ", "ɽ", "ɾ", "˫", "ͬ", "Γ", "Ѓ", "Г", "Я", "г", "ѓ", "я", "Ҁ", "ҁ", "Ґ", "ґ", "Ӷ", "ӷ", "Ի", "Ր", "ז", "٢", "٣", "ᴙ", "ᴦ", "ᴿ", "ᵲ", "ᶉ", "Ṙ", "ṙ", "Ṛ", "ṛ", "Ṝ", "ṝ", "Ṟ", "ṟ", "┌", "⌐", "Ɽ", "ꝛ", "Ꝛ", "ꝶ", "Ꞧ"];
  let s = ["Ś", "ś", "Ŝ", "ŝ", "Ş", "ş", "Š", "š", "Ƽ", "ƽ", "Ƨ", "ƨ", "Ș", "ș", "ȿ", "ʂ", "ˢ", "ζ", "ς", "ϛ", "Ϩ", "Ѕ", "Ց", "Տ", "Ֆ", "ֆ", "ؾ", "ؽ", "ؾ", "ې", "ᵴ", "ᶊ", "ᶳ", "Ṡ", "ṡ", "Ṣ", "ṣ", "Ṥ", "ṥ", "Ṧ", "ṧ", "Ṩ", "ṩ", "ϟ", "Ȿ", "Ꞩ", "ꞩ"];
  let t = ["Ţ", "ţ", "Ť", "ť", "Ŧ", "ŧ", "ƚ", "Ɨ", "ƫ", "Ƭ", "ƭ", "Ʈ", "Ț", "ț", "Ƚ", "ɫ", "ʈ", "ʇ", "˦", "˧", "˫", "Ͱ", "Ͳ", "ͳ", "Τ", "τ", "Т", "т", "Է", "Ե", "ե", "ז", "٢", "٣", "ᴛ", "ᴦ", "ᵵ", "ᵻ", "ᵼ", "ᶵ", "Ṫ", "ṫ", "Ṭ", "ṭ", "Ṯ", "ṯ", "Ṱ", "ṱ", "†", "‡", "₮", "┬", "╤", "╦", "╫", "╬", "╪", "Ɫ", "ⱡ", "Ⱡ", "Ꞇ", "ꞇ", "Ʇ", "ﬢ"];
  let u = ["ù", "ú", "û", "ü", "Ù", "Ú", "Û", "Ü", "ũ", "Ũ", "Ū", "ū", "Ŭ", "ŭ", "Ů", "ů", "Ű", "ű", "Ų", "ų", "Ư", "ư", "Ʊ", "Ʋ", "Ǔ", "ǔ", "ǖ", "Ǖ", "Ǘ", "ǘ", "Ǚ", "ǚ", "Ǜ", "ǜ", "Ȕ", "ȕ", "Ȗ", "ȗ", "Ʉ", "ɥ", "ʋ", "ʯ", "ʮ", "ΰ", "ϋ", "ϥ", "Џ", "Ц", "Ч", "ц", "џ", "Ա", "մ", "կ", "ݓ", "ݒ", "ݐ", "ݧ", "ݨ", "ݩ", "ݪ", "ᴗ", "ᵘ", "ᵤ", "ᶣ", "ᶸ", "Ṳ", "ṳ", "Ṵ", "ṵ", "Ṷ", "Ṹ", "ṹ", "Ṻ", "ṻ", "Ủ", "ủ", "Ứ", "Ừ", "ừ", "Ử", "ử", "Ữ", "ữ", "Ự", "ự", "ὐ", "ὑ", "ὒ", "ὓ", "ὔ", "ὕ", "ὖ", "ὗ", "ὺ", "ύ", "ῠ", "ῡ", "ῢ", "ΰ", "ꭎ"]
  let v = ["Ʋ", "Ʌ", "ʌ", "˅", "ͮ", "ν", "Ѵ", "ѵ", "Ѷ", "ѷ", "ұ", "ү", "ט", "؆", "؇", "۷", "ᴠ", "ᵛ", "ᵥ", "Ṽ", "ṽ", "Ṿ", "ṿ", "√", "ⱱ", "ⱴ", "ⱽ", "Ꝩ", "ꝩ"];
  let w = ["Ŵ", "ŵ", "Ɯ", "ɯ", "ɰ", "Ψ", "ω", "ψ", "Ϣ", "ϖ", "ϣ", "Ш", "Щ", "ш", "щ", "Ѱ", "ѱ", "җ", "Ҹ", "ҹ", "ա", "պ", "ש", "ᴡ", "ᵚ", "Ẁ", "ẁ", "Ẃ", "ẃ", "Ẅ", "ẅ", "Ẇ", "ẇ", "Ẉ", "ẉ", "ὠ", "ὡ", "ὢ", "ὣ", "ὤ", "ὥ", "ὦ", "ὧ", "ὼ", "ώ", "ῲ", "ῳ", "ῴ", "ῶ", "ῷ", "₩", "└╩┘", "ⱳ", "Ⱳ", "ꝡ", "Ꝡ", "ꟺ", "ꞷ", "Ꞷ", "ꭐ", "ꟿ", "שׁ", "שׂ", "שּׁ", "שּׂ", "שּ", "ʷ"];
  let x = ["˟", "ˣ", "ͯ", "χ", "Χ", "Ж", "Х", "х", "ж", "Ӝ", "җ", "ӿ", "Ӿ", "צ", "ᵡ", "ᵪ", "ᶍ", "Ẋ", "ẋ", "Ẍ", "ẍ", "ₓ", "ꭓ", "ꭔ", "ꭕ", "ꭖ", "ꭗ", "ꭘ", "ꭙ"];
  let y = ["ý", "ÿ", "¥", "µ", "Ŷ", "ŷ", "Ÿ", "Ɣ", "Ƴ", "ƴ", "Ȳ", "ȳ", "Ɏ", "ɏ", "ˠ", "Υ", "γ", "Ϋ", "Ψ", "ψ", "ϒ", "ϓ", "ϔ", "ϥ", "У", "у", "ў", "Ѱ", "Ү", "Ұ", "Ҷ", "ҷ", "Ӌ", "ӌ", "ץ", "۲", "ᵧ", "Ẏ", "ẏ", "Ỳ", "ỳ", "Ỵ", "ỵ", "Ỷ", "Ỹ", "ỹ", "Ὑ", "Ὓ", "Ὕ", "Ὗ", "Ῠ", "Ῡ", "Ὺ", "Ύ", "Ɥ"];
  let z = ["Ź", "ź", "Ż", "ż", "Ž", "ž", "ƺ", "ʑ", "ʓ", "ζ", "ᵶ", "ᶎ", "ᶚ", "ᶻ", "ᶼ", "ᶽ", "ᶾ", "Ẑ", "ẑ", "Ẓ", "ẓ", "Ẕ", "ẕ", "Ⱬ", "ⱬ", "Ɀ"];

  //converts phrase to Array
  for (let index = 0; index < splitter.length; index++) {
   
      let element = splitter[index];

    if (element === "a") {
      oPhrase.push(element.replaceAll("a", a[Math.floor(Math.random() * a.length)]));
    }
    else if (element === "b") {
       oPhrase.push(element.replaceAll("b", b[Math.floor(Math.random() * b.length)]));
    }
    else if (element === "c") {
       oPhrase.push(element.replaceAll("c", c[Math.floor(Math.random() * c.length)]));
    }
    else if (element === "d") {
       oPhrase.push(element.replaceAll("d", d[Math.floor(Math.random() * d.length)]));
    }
    else if (element === "e") {
       oPhrase.push(element.replaceAll("e", e[Math.floor(Math.random() * e.length)]));
    }
    else if (element === "f") {
       oPhrase.push(element.replaceAll("f", f[Math.floor(Math.random() * f.length)]));
    }
    else if (element === "g") {
       oPhrase.push(element.replaceAll("g", g[Math.floor(Math.random() * g.length)]));
    }
    else if (element === "h") {
       oPhrase.push(element.replaceAll("h", h[Math.floor(Math.random() * h.length)]));
    }
    else if (element === "i") {
       oPhrase.push(element.replaceAll("i", i[Math.floor(Math.random() * i.length)]));
    }
    else if (element === "j") {
       oPhrase.push(element.replaceAll("j", j[Math.floor(Math.random() * j.length)]));
    }
    else if (element === "k") {
       oPhrase.push(element.replaceAll("k", k[Math.floor(Math.random() * k.length)]));
    }
    else if (element === "l") {
       oPhrase.push(element.replaceAll("l", l[Math.floor(Math.random() * l.length)]));
    }
    else if (element === "m") {
       oPhrase.push(element.replaceAll("m", m[Math.floor(Math.random() * m.length)]));
    }
    else if (element === "n") {
       oPhrase.push(element.replaceAll("n", n[Math.floor(Math.random() * n.length)]));
    }
    else if (element === "o") {
       oPhrase.push(element.replaceAll("o", o[Math.floor(Math.random() * o.length)]));
    }
    else if (element === "p") {
       oPhrase.push(element.replaceAll("p", p[Math.floor(Math.random() * p.length)]));
    }
    else if (element === "q") {
       oPhrase.push(element.replaceAll("q", q[Math.floor(Math.random() * q.length)]));
    }
    else if (element === "r") {
       oPhrase.push(element.replaceAll("r", r[Math.floor(Math.random() * r.length)]));
    }
    else if (element === "s") {
       oPhrase.push(element.replaceAll("s", s[Math.floor(Math.random() * s.length)]));
    }
    else if (element === "t") {
       oPhrase.push(element.replaceAll("t", t[Math.floor(Math.random() * t.length)]));
    }
    else if (element === "u") {
       oPhrase.push(element.replaceAll("u", u[Math.floor(Math.random() * u.length)]));
    }
    else if (element === "v") {
       oPhrase.push(element.replaceAll("v", v[Math.floor(Math.random() * v.length)]));
    }
    else if (element === "w") {
       oPhrase.push(element.replaceAll("w", w[Math.floor(Math.random() * w.length)]));
    }
    else if (element === "x") {
       oPhrase.push(element.replaceAll("x", x[Math.floor(Math.random() * x.length)]));
    }
    else if (element === "y") {
       oPhrase.push(element.replaceAll("y", y[Math.floor(Math.random() * y.length)]));
    }
    else if (element === "z") {
       oPhrase.push(element.replaceAll("z", z[Math.floor(Math.random() * z.length)]));
    }
    else {
      oPhrase.push(element);
      }
    }
    return oPhrase
}
        
    
    
    
    
    
    
        


        



